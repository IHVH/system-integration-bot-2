"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ñ—Ä—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞."""
import logging
from typing import List
import telebot
import requests
from telebot import types
from telebot.callback_data import CallbackData
from bot_func_abc import AtomicBotFunctionABC

class AtomicFruitBotFunction(AtomicBotFunctionABC):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ñ—Ä—É–∫—Ç–æ–≤ –∏
       –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—Ä—É–∫—Ç–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    commands: List[str] = ["fruitbot"]
    authors: List[str] = ["Twinteko"]
    about: str = "–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤"
    description: str = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/fruitbot - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä—É–∫—Ç–∞–º–∏.\n"
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º.\n"
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Fruityvice API, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ —Ñ—Ä—É–∫—Ç–æ–≤."
    )
    state: bool = True

    bot: telebot.TeleBot
    fruit_keyboard_factory: CallbackData

    def __init__(self):
        self.cache = {}
        self.api_url = "https://fruityvice.com/api/fruit"

    def set_handlers(self, bot: telebot.TeleBot):
        """a"""
        self.bot = bot
        self.fruit_keyboard_factory = CallbackData('fruit_action', prefix=self.commands[0])

        @bot.message_handler(commands=self.commands)
        def fruit_message_handler(message: types.Message):
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏:"
            bot.send_message(
                chat_id=message.chat.id,
                text=msg,
                reply_markup=self.__gen_markup()
            )

        @bot.callback_query_handler(func=None, config=self.fruit_keyboard_factory.filter())
        def fruit_keyboard_callback(call: types.CallbackQuery):
            callback_data: dict = self.fruit_keyboard_factory.parse(call.data)
            action = callback_data['fruit_action']

            if action == 'list':
                fruits = self.get_all_fruits()
                self.bot.send_message(call.message.chat.id, fruits)
            elif action == 'info':
                force_reply = types.ForceReply(selective=False)
                msg = self.bot.send_message(
                    call.message.chat.id,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä—É–∫—Ç–∞:",
                    reply_markup=force_reply
                )
                self.bot.register_next_step_handler(msg, self.__process_fruit_input)
            self.bot.answer_callback_query(call.id)

    def __gen_markup(self):
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 2
        list_data = self.fruit_keyboard_factory.new(fruit_action="list")
        info_data = self.fruit_keyboard_factory.new(fruit_action="info")

        markup.add(
            types.InlineKeyboardButton("üçé –°–ø–∏—Å–æ–∫", callback_data=list_data),
            types.InlineKeyboardButton("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=info_data)
        )
        return markup

    def get_all_fruits(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—Ä—É–∫—Ç–æ–≤"""
        try:
            response = requests.get(f"{self.api_url}/all", timeout=10)
            response.raise_for_status()
            fruits = response.json()
            fruit_list = "\n".join([f"‚Ä¢ {fruit['name']}" for fruit in fruits])
            return f"üçç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã:\n{fruit_list}\n\n(–ø–æ–∫–∞–∑–∞–Ω–æ {len(fruits)})"
        except requests.exceptions.RequestException as e:
            logging.error("Fruit API error: %s", str(e))
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ—Ä—É–∫—Ç–æ–≤"

    def get_fruit_info(self, name: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ—Ä—É–∫—Ç–µ"""
        try:
            response = requests.get(f"{self.api_url}/{name.lower()}", timeout=10)
            response.raise_for_status()
            fruit = response.json()

            nutritions = fruit.get('nutritions', {})
            info = (
                f"üå≥ {fruit['name']}\n"
                f"–°–µ–º–µ–π—Å—Ç–≤–æ: {fruit['family']}\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {nutritions.get('calories', 'N/A')}\n"
                f"–ë–µ–ª–∫–∏: {nutritions.get('protein', 'N/A')}–≥\n"
                f"–ñ–∏—Ä—ã: {nutritions.get('fat', 'N/A')}–≥\n"
                f"–£–≥–ª–µ–≤–æ–¥—ã: {nutritions.get('carbohydrates', 'N/A')}–≥\n"
                f"–°–∞—Ö–∞—Ä: {nutritions.get('sugar', 'N/A')}–≥"
            )
            return info
        except requests.HTTPError:
            return f"‚ùå –§—Ä—É–∫—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except requests.exceptions.RequestException as e:
            logging.error("Fruit info error: %s", str(e))
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

    def __process_fruit_input(self, message: types.Message):
        try:
            fruit_name = message.text.strip()
            info = self.get_fruit_info(fruit_name)
            self.bot.send_message(
                chat_id=message.chat.id,
                text=info,
                parse_mode='Markdown'
            )
        except (AttributeError, ValueError) as e:
            logging.error("Processing error: %s", str(e))
            self.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
