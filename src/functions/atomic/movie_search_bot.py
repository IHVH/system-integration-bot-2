"""Telegram bot module for searching movies using OMDb API."""

import os
import logging
from typing import List, Dict, Any, Optional
import requests
import telebot
from telebot import types
from telebot.callback_data import CallbackData
from bot_func_abc import AtomicBotFunctionABC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MovieSearchBotFunction(AtomicBotFunctionABC):
    """Atomic Telegram bot function for searching movies using OMDb API."""

    commands: List[str] = ["movie", "searchmovie"]
    authors: List[str] = ["astahov_alexander"]
    about: str = "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ OMDb API"
    description: str = (
        "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OMDb API.\n"
        "–ü—Ä–∏–º–µ—Ä: /movie Interstellar\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    )
    state: bool = True

    def __init__(self):
        self.bot = None
        self.omdb_url = "http://www.omdbapi.com/"
        self.movie_keyboard_factory = CallbackData("imdb_id", prefix="movie_detail")

    def set_handlers(self, bot: telebot.TeleBot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ inline-–∫–Ω–æ–ø–æ–∫."""
        self.bot = bot

        @bot.message_handler(commands=self.commands)
        def movie_search_handler(message: types.Message):
            try:
                args = message.text.split(maxsplit=1)
                if len(args) < 2:
                    bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –ü—Ä–∏–º–µ—Ä: /movie Interstellar")
                    return

                title = args[1].strip()
                if len(title) < 2:
                    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
                    return

                movies = self._fetch_movies(title)
                if not movies:
                    bot.reply_to(message, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                markup = self._generate_movie_buttons(movies)
                bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–æ:", reply_markup=markup)
            except (ValueError, requests.exceptions.RequestException) as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–∏—Å–∫–∞: %s", str(e))
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤")

        @bot.callback_query_handler(func=None, config=self.movie_keyboard_factory.filter())
        def movie_details_callback(call: types.CallbackQuery):
            try:
                callback_data = self.movie_keyboard_factory.parse(call.data)
                imdb_id = callback_data["imdb_id"]
                movie = self._fetch_movie_details(imdb_id)

                if not movie:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ")
                    return

                response = self._format_movie_details(movie)

                if movie.get('Poster') and movie['Poster'] != 'N/A':
                    bot.send_photo(call.message.chat.id, movie['Poster'],
                                   caption=response, parse_mode='HTML')
                else:
                    bot.send_message(call.message.chat.id, response, parse_mode='HTML')

                bot.answer_callback_query(call.id)
            except (ValueError, requests.exceptions.RequestException) as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ callback: %s", str(e))
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def _fetch_movies(self, title: str) -> Optional[List[Dict[str, Any]]]:
        try:
            params = {
                "apikey": self._get_omdb_token(),
                "s": title,
                "type": "movie"
            }
            response = requests.get(self.omdb_url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            logger.debug("API Response for '%s': %s", title, data)
            return data["Search"] if data.get("Response") == "True" else None
        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤: %s", str(e))
            return None

    def _fetch_movie_details(self, imdb_id: str) -> Optional[Dict[str, Any]]:
        try:
            params = {
                "apikey": self._get_omdb_token(),
                "i": imdb_id,
                "plot": "full"
            }
            response = requests.get(self.omdb_url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            logger.debug("API Details for %s: %s", imdb_id, data)
            return data if data.get("Response") == "True" else None
        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞: %s", str(e))
            return None

    def _get_omdb_token(self) -> str:
        token = os.getenv("OMDB_API_TOKEN")
        if not token:
            raise ValueError("OMDB_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return token

    def _generate_movie_buttons(self, movies: List[Dict[str, str]]) -> types.InlineKeyboardMarkup:
        markup = types.InlineKeyboardMarkup(row_width=1)
        for movie in movies[:5]:
            if 'imdbID' not in movie:
                continue
            btn_text = f"{movie['Title']} ({movie['Year']})"
            callback_data = self.movie_keyboard_factory.new(imdb_id=movie["imdbID"])
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))
        return markup

    def _format_movie_details(self, movie: Dict[str, str]) -> str:
        return (
            f"<b>{movie.get('Title', 'N/A')}</b> ({movie.get('Year', 'N/A')})\n\n"
            f"<b>‚≠ê –†–µ–π—Ç–∏–Ω–≥:</b> {movie.get('imdbRating', 'N/A')}/10\n"
            f"<b>üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> {movie.get('Released', 'N/A')}\n"
            f"<b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie.get('Runtime', 'N/A')}\n"
            f"<b>üé≠ –ñ–∞–Ω—Ä:</b> {movie.get('Genre', 'N/A')}\n"
            f"<b>üë®‚Äçüíº –†–µ–∂–∏—Å—Å–µ—Ä:</b> {movie.get('Director', 'N/A')}\n"
            f"<b>üë• –ê–∫—Ç—ë—Ä—ã:</b> {movie.get('Actors', 'N/A')}\n\n"
            f"<b>üìñ –°—é–∂–µ—Ç:</b>\n{movie.get('Plot', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )

"""Telegram bot module for searching movies using OMDb API."""

import os
import logging
from typing import List, Dict, Any, Optional
import requests
import telebot
from telebot import types
from bot_func_abc import AtomicBotFunctionABC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MovieSearchBotFunction(AtomicBotFunctionABC):
    """Atomic Telegram bot function for searching movies using OMDb API."""

    commands: List[str] = ["movie", "searchmovie"]
    authors: List[str] = ["IHVH"]
    about: str = "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ OMDb API"
    description: str = (
        "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OMDb API.\n"
        "–ü—Ä–∏–º–µ—Ä: /movie Interstellar\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    )
    state: bool = True

    def __init__(self):
        self.bot = None
        self.omdb_url = "http://www.omdbapi.com/"

    def set_handlers(self, bot: telebot.TeleBot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ inline-–∫–Ω–æ–ø–æ–∫."""
        self.bot = bot

        @bot.message_handler(commands=self.commands)
        def movie_search_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞."""
            try:
                args = message.text.split(maxsplit=1)
                if len(args) < 2:
                    bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –ü—Ä–∏–º–µ—Ä: /movie Interstellar")
                    return

                title = args[1].strip()
                if len(title) < 2:
                    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
                    return

                movies = self._fetch_movies(title)
                if not movies:
                    bot.reply_to(message, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                markup = self._generate_movie_buttons(movies)
                bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–æ:", reply_markup=markup)
            except (ValueError, requests.exceptions.RequestException) as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–∏—Å–∫–∞: %s", str(e))
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤")

        @bot.callback_query_handler(func=lambda call: call.data.startswith('movie_detail:'))
        def movie_details_callback(call: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ñ–∏–ª—å–º–æ–º."""
            try:
                imdb_id = call.data.split(':')[1]
                movie = self._fetch_movie_details(imdb_id)
                
                if not movie:
                    bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ")
                    return

                response = self._format_movie_details(movie)
                
                if movie.get('Poster') and movie['Poster'] != 'N/A':
                    bot.send_photo(call.message.chat.id, movie['Poster'], 
                                 caption=response, parse_mode='HTML')
                else:
                    bot.send_message(call.message.chat.id, response, parse_mode='HTML')
                                    
                bot.answer_callback_query(call.id)
            except (ValueError, requests.exceptions.RequestException) as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ callback: %s", str(e))
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def _fetch_movies(self, title: str) -> Optional[List[Dict[str, Any]]]:
        """–ò—â–µ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        try:
            params = {
                "apikey": self._get_omdb_token(),
                "s": title,
                "type": "movie"
            }
            response = requests.get(self.omdb_url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            logger.debug("API Response for '%s': %s", title, data)
            return data["Search"] if data.get("Response") == "True" else None
        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤: %s", str(e))
            return None

    def _fetch_movie_details(self, imdb_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ IMDb ID."""
        try:
            params = {
                "apikey": self._get_omdb_token(),
                "i": imdb_id,
                "plot": "full"
            }
            response = requests.get(self.omdb_url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            logger.debug("API Details for %s: %s", imdb_id, data)
            return data if data.get("Response") == "True" else None
        except requests.exceptions.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞: %s", str(e))
            return None

    def _get_omdb_token(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω OMDb –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        token = os.getenv("OMDB_API_TOKEN")
        if not token:
            raise ValueError("OMDB_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return token

    def _generate_movie_buttons(self, movies: List[Dict[str, str]]) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤."""
        markup = types.InlineKeyboardMarkup(row_width=1)
        for movie in movies[:5]:
            if 'imdbID' not in movie:
                continue
            btn_text = f"{movie['Title']} ({movie['Year']})"
            callback_data = f"movie_detail:{movie['imdbID']}"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))
        return markup

    def _format_movie_details(self, movie: Dict[str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º–∞ –≤ HTML-—Ñ–æ—Ä–º–∞—Ç."""
        return (
            f"<b>{movie.get('Title', 'N/A')}</b> ({movie.get('Year', 'N/A')})\n\n"
            f"<b>‚≠ê –†–µ–π—Ç–∏–Ω–≥:</b> {movie.get('imdbRating', 'N/A')}/10\n"
            f"<b>üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> {movie.get('Released', 'N/A')}\n"
            f"<b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie.get('Runtime', 'N/A')}\n"
            f"<b>üé≠ –ñ–∞–Ω—Ä:</b> {movie.get('Genre', 'N/A')}\n"
            f"<b>üë®‚Äçüíº –†–µ–∂–∏—Å—Å–µ—Ä:</b> {movie.get('Director', 'N/A')}\n"
            f"<b>üë• –ê–∫—Ç—ë—Ä—ã:</b> {movie.get('Actors', 'N/A')}\n\n"
            f"<b>üìñ –°—é–∂–µ—Ç:</b>\n{movie.get('Plot', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )
