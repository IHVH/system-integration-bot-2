"""Module implementation of the atomic function for NASA's 
Astronomy Picture of the Day (APOD) API and Earth API."""

import os
import logging
from typing import List, Dict, Any, Optional
import requests
import telebot
from telebot import types
from bot_func_abc import AtomicBotFunctionABC


class AtomicNasaApodFunction(AtomicBotFunctionABC):
    """Implementation of atomic function for NASA Astronomy Picture o the Day and Earth imagery"""

    commands: List[str] = ["nasa", "earth"]
    authors: List[str] = ["mitochka"]
    about: str = "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–º–∫–∏ –æ—Ç NASA"
    description: str = """NASA —Å–µ—Ä–≤–∏—Å—ã:
    1. APOD: /nasa - —Ñ–æ—Ç–æ –¥–Ω—è
    2. Earth: /earth 37.7749,-122.4194 - —Å–Ω–∏–º–æ–∫ –ó–µ–º–ª–∏
    """
    state: bool = True

    # API configuration
    APOD_API_URL = "https://api.nasa.gov/planetary/apod"
    EARTH_API_URL = "https://api.nasa.gov/planetary/earth/imagery"
    def __init__(self):
        self.bot = None
        self.logger = logging.getLogger(__name__)

    def set_handlers(self, bot: telebot.TeleBot):
        """Set message handlers"""
        self.bot = bot
        self.logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ NASA API")

        @bot.message_handler(commands=[self.commands[0]])
        def nasa_message_handler(message: types.Message):
            try:
                command_parts = message.text.split()

                # Check if the command has additional parameters
                if len(command_parts) > 1 and command_parts[1].lower() == "random":
                    self.__handle_random_apod(message)
                else:
                    self.__handle_today_apod(message)
            except (telebot.apihelper.ApiException, KeyError, ValueError) as ex:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: %s", ex)
                bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(ex)}")
            except requests.exceptions.RequestException as ex:
                logging.exception("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: %s", ex)
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(ex)}")
            except (TypeError, AttributeError, RuntimeError) as ex:
                logging.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", ex)
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç—Ä–∞–Ω –°–ù–ì –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
        @bot.message_handler(commands=[self.commands[1]])
        def earth_message_handler(message: types.Message):
            try:
                command_parts = message.text.split()
                if len(command_parts) < 2:
                    bot.reply_to(
                        message,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /earth <—à–∏—Ä–æ—Ç–∞>,<–¥–æ–ª–≥–æ—Ç–∞>\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: /earth 37.7749,-122.4194 (–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ)"
                    )
                    return
                # Parse coordinates
                try:
                    coords = command_parts[1].split(',')
                    if len(coords) != 2:
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
                    lat = float(coords[0])
                    lon = float(coords[1])
                    # Validate coordinates
                    if not -90 <= lat <= 90 or not -180 <= lon <= 180:
                        raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                    self.__handle_earth_imagery(message, lat, lon)
                except ValueError as e:
                    bot.reply_to(
                        message,
                        f"–û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: {str(e)}\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /earth <—à–∏—Ä–æ—Ç–∞>,<–¥–æ–ª–≥–æ—Ç–∞>\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: /earth 37.7749,-122.4194 (–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ)"
                    )
            except (telebot.apihelper.ApiException, KeyError, ValueError) as ex:
                self.logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã Earth: %s", ex)
                bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(ex)}")
            except requests.exceptions.RequestException as ex:
                self.logger.exception("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã Earth: %s", ex)
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(ex)}")
            except (TypeError, AttributeError, RuntimeError) as ex:
                self.logger.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã Earth: %s", ex)
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç—Ä–∞–Ω –°–ù–ì –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")

    def __get_api_key(self) -> str:
        """Get NASA API key from environment variables"""
        api_key = os.environ.get("NASA_API_KEY")
        if not api_key:
            self.logger.warning("NASA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            # Fallback to demo key for development
            return "DEMO_KEY"
        return api_key

    def __make_api_request(self, url: str, params: Optional[Dict[str, Any]] = None) -> Any:
        """Make a request to NASA APIs"""
        if params is None:
            params = {}

        # Always include the API key
        params["api_key"] = self.__get_api_key()

        try:
            self.logger.debug("–ó–∞–ø—Ä–æ—Å –∫ NASA API: %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ %s", url, params)
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            # Check if response is JSON or binary data
            content_type = response.headers.get('Content-Type', '')
            if 'application/json' in content_type:
                return response.json()
            return response.content
        except requests.exceptions.RequestException as e:
            self.logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ NASA API: %s", e)
            raise RuntimeError(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}") from e

    def __handle_today_apod(self, message: types.Message) -> None:
        """Handle request for today's Astronomy Picture of the Day"""
        chat_id = message.chat.id

        self.bot.send_message(chat_id, "–ü–æ–ª—É—á–∞—é –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è...")

        try:
            data = self.__make_api_request(self.APOD_API_URL)
            self.__send_apod_data(chat_id, data)
        except (telebot.apihelper.ApiException, KeyError, ValueError) as ex:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(ex)}")
        except requests.exceptions.RequestException as ex:
            logging.exception("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(ex)}")
        except (TypeError, AttributeError, RuntimeError) as ex:
            self.logger.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    def __handle_random_apod(self, message: types.Message) -> None:
        """Handle request for a random Astronomy Picture of the Day"""
        chat_id = message.chat.id

        self.bot.send_message(chat_id, "–ü–æ–ª—É—á–∞—é —Å–ª—É—á–∞–π–Ω–æ–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ...")

        try:
            data = self.__make_api_request(self.APOD_API_URL, {"count": 1})
            # API returns a list with one item for random requests
            self.__send_apod_data(chat_id, data[0])
        except (telebot.apihelper.ApiException, KeyError, ValueError) as ex:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(ex)}")
        except requests.exceptions.RequestException as ex:
            logging.exception("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(ex)}")
        except (TypeError, AttributeError, RuntimeError) as ex:
            self.logger.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    def __handle_earth_imagery(self, message: types.Message, lat: float, lon: float) -> None:
        """Handle request for Earth imagery at specific coordinates"""
        chat_id = message.chat.id

        self.bot.send_message(
            chat_id,
            f"–ü–æ–ª—É—á–∞—é —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat}, {lon}..."
        )

        try:
            # Prepare parameters for Earth API
            params = {
                "lat": lat,
                "lon": lon,
                "dim": 0.15,  # Size in degrees (~15-20km)
                "date": "2020-01-01"  # Use a recent date with good coverage
            }
            # Make request to Earth API
            image_data = self.__make_api_request(self.EARTH_API_URL, params)
            caption = (
                f"üõ∞ *–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ –ó–µ–º–ª–∏*\n"
                f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n"
                f"üóì –î–∞—Ç–∞ —Å—ä–µ–º–∫–∏: 2020-01-01\n\n"
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ NASA Earth API"
            )
            self.bot.send_photo(
                chat_id,
                image_data,
                caption=caption,
                parse_mode="Markdown"
            )
            # Send a link to Google Maps for these coordinates
            maps_url = f"https://www.google.com/maps/@{lat},{lon},12z"
            self.bot.send_message(
                chat_id,
                f"[üó∫ –û—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é –≤ Google Maps]({maps_url})",
                parse_mode="Markdown",
                disable_web_page_preview=False
            )
        except (telebot.apihelper.ApiException, KeyError, ValueError) as ex:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(
                chat_id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞: {str(ex)}\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤."
            )
        except requests.exceptions.RequestException as ex:
            logging.exception("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(ex)}")
        except (
            TypeError,
            AttributeError,
            IndexError,
            ConnectionError,
            TimeoutError,
            IOError
        ) as ex:
            logging.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞: %s", ex)
            self.bot.send_message(
                chat_id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞: {str(ex)}\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤."
            )

    def __send_apod_data(self, chat_id: int, data: Dict[str, Any]) -> None:
        """Send APOD data to the user"""
        try:
            # Check if we have all required fields
            if not all(key in data for key in ["title", "date", "explanation"]):
                self.bot.send_message(chat_id, "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç NASA API.")
                return

            # Format the caption
            caption = f"üî≠ *{data['title']}*\n" f"üìÖ –î–∞—Ç–∞: {data['date']}\n\n"

            # Add copyright information if available
            if "copyright" in data:
                caption += f"¬© {data['copyright']}\n\n"

            # Add explanation (truncate if too long for Telegram)
            explanation = data["explanation"]
            if len(explanation) > 800:
                explanation = explanation[:797] + "..."
            caption += explanation

            # Check media type and send appropriate message
            if data.get("media_type") == "image":
                # For images, send photo with caption
                self.bot.send_photo(
                    chat_id, data["url"], caption=caption, parse_mode="Markdown"
                )
            elif data.get("media_type") == "video":
                # For videos, send the thumbnail as photo and video URL in caption
                if "thumbnail_url" in data:
                    full_caption = caption + f"\n\n[üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({data['url']})"
                    self.bot.send_photo(
                        chat_id,
                        data["thumbnail_url"],
                        caption=full_caption,
                        parse_mode="Markdown",
                    )
                else:
                    # If no thumbnail, just send text with video link
                    full_caption = caption + f"\n\n[üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({data['url']})"
                    self.bot.send_message(
                        chat_id,
                        full_caption,
                        parse_mode="Markdown",
                        disable_web_page_preview=False,
                    )
            else:
                # For other media types, send as text
                full_caption = caption #+ f"\n\n[üîó –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Å—É—Ä—Å]({data['url']})"
                self.bot.send_message(
                    chat_id,
                    full_caption,
                    parse_mode="Markdown",
                    disable_web_page_preview=False,
                )

        except (telebot.apihelper.ApiException, KeyError, ValueError) as ex:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(ex)}")
        except requests.exceptions.RequestException as ex:
            logging.exception("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(ex)}")
        except (TypeError, AttributeError, RuntimeError) as ex:
            logging.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", ex)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
