"""–ú–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ Star Trek —á–µ—Ä–µ–∑ API stapi.co."""

import logging
import re
from datetime import datetime
from typing import List

import requests
import telebot
from telebot import types
from telebot.callback_data import CallbackData

from bot_func_abc import AtomicBotFunctionABC


class AtomicStarTrekBotFunction(AtomicBotFunctionABC):
    """–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ Star Trek —á–µ—Ä–µ–∑ API stapi.co"""

    commands: List[str] = ["startrek", "stmovies"]
    authors: List[str] = ["monwmon"]
    about: str = "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ Star Trek"
    description: str = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/startrek –∏–ª–∏ /stmovies - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ Star Trek\n"
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º.\n"
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: stapi.co"
    )
    state: bool = True

    bot: telebot.TeleBot
    movie_keyboard_factory: CallbackData

    pagination_data = {}

    def set_handlers(self, bot: telebot.TeleBot):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤"""
        self.bot = bot
        self.movie_keyboard_factory = CallbackData('movie_action', prefix=self.commands[0])

        @bot.message_handler(commands=self.commands)
        def startrek_handler(message: types.Message):
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–ª—å–º–∞–º–∏ Star Trek:"
            bot.send_message(
                chat_id=message.chat.id,
                text=msg,
                reply_markup=self.__gen_markup()
            )

        @bot.callback_query_handler(func=None, config=self.movie_keyboard_factory.filter())
        def movie_callback(call: types.CallbackQuery):
            callback_data: dict = self.movie_keyboard_factory.parse(call.data)
            action = callback_data['movie_action']

            if action == 'list':
                movies = self.__fetch_movies()
                if not movies:
                    bot.send_message(call.message.chat.id, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    bot.answer_callback_query(call.id)
                    return
                self.pagination_data[call.message.chat.id] = {"movies": movies, "page": 0}
                self.__send_movies_page(call.message.chat.id, 0)
            elif action == 'info':
                force_reply = types.ForceReply(selective=False)
                msg = bot.send_message(
                    call.message.chat.id,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ Star Trek:",
                    reply_markup=force_reply
                )
                bot.register_next_step_handler(msg, self.__process_movie_input)
            bot.answer_callback_query(call.id)

        @bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
        def pagination_callback(call: types.CallbackQuery):
            page = int(call.data.split('_')[1])
            chat_id = call.message.chat.id

            if chat_id not in self.pagination_data:
                bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
                return

            self.pagination_data[chat_id]["page"] = page
            self.__send_movies_page(
                chat_id, page,
                edit_message=True,
                message_id=call.message.message_id
            )
            bot.answer_callback_query(call.id)

    def __gen_markup(self):
        markup = types.InlineKeyboardMarkup(row_width=2)
        list_data = self.movie_keyboard_factory.new(movie_action="list")
        info_data = self.movie_keyboard_factory.new(movie_action="info")

        markup.add(
            types.InlineKeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", callback_data=list_data),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ", callback_data=info_data)
        )
        return markup

    def __fetch_movies(self) -> List[dict]:
        try:
            url = "https://stapi.co/api/v1/rest/movie/search"
            params = {"title": "Star Trek"}
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            return data.get('movies', [])
        except requests.exceptions.RequestException as e:
            logging.error("Star Trek API error: %s", e)
            return []

    def __send_movies_page(
        self,
        chat_id: int,
        page: int,
        *,
        page_size: int = 5,
        edit_message: bool = False,
        message_id: int = None
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–æ–≤"""
        movies = self.pagination_data[chat_id]["movies"]
        total = len(movies)
        start = page * page_size
        end = start + page_size
        page_movies = movies[start:end]

        text = "üé¨ –§–∏–ª—å–º—ã Star Trek:\n\n"
        for movie in page_movies:
            director = movie['mainDirector']['name'] if movie.get('mainDirector') else 'N/A'
            text += (
                f"‚Ä¢ {movie.get('title', 'N/A')} "
                f"({movie.get('yearFrom', 'N/A')}), —Ä–µ–∂. {director}\n"
            )
        text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(total + page_size - 1) // page_size}"

        markup = types.InlineKeyboardMarkup(row_width=2)
        if page > 0:
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
        if end < total:
            markup.add(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}"))

        if edit_message and message_id:
            self.bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=markup)
        else:
            self.bot.send_message(chat_id, text, reply_markup=markup)

    def get_all_movies(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ Star Trek."""
        movies = self.__fetch_movies()
        if not movies:
            return "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        film_list = "\n".join([
            f"‚Ä¢ {movie.get('title', 'N/A')} ({movie.get('yearFrom', 'N/A')}), —Ä–µ–∂. "
            f"{movie['mainDirector']['name'] if movie.get('mainDirector') else 'N/A'}"
            for movie in movies
        ])
        return f"üé¨ –§–∏–ª—å–º—ã Star Trek:\n{film_list}\n\n(–í—Å–µ–≥–æ: {len(movies)})"

    def get_movie_info(self, title: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        try:
            title_clean = re.sub(r'\s*\(\d{4}\)\s*$', '', title).strip()

            url = "https://stapi.co/api/v1/rest/movie/search"
            params = {"title": title_clean}
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            movies = data.get('movies', [])

            if not movies:
                return f"‚ùå –§–∏–ª—å–º '{title_clean}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

            movie = next((m for m in movies if m.get('title', '').lower() == title_clean.lower()), movies[0])

            lines = [f"üé¨ {movie.get('title', 'N/A')}"]

            year_from = movie.get('yearFrom')
            year_to = movie.get('yearTo')
            if year_from or year_to:
                years = f"{year_from or ''}"
                if year_to and year_to != year_from:
                    years += f" - {year_to}"
                lines.append(f"–ì–æ–¥—ã: {years}")

            director = movie.get('mainDirector')
            if director and director.get('name'):
                lines.append(f"–†–µ–∂–∏—Å—Å–µ—Ä: {director['name']}")

            us_release = movie.get('usReleaseDate')
            if us_release:
                try:
                    dt = datetime.strptime(us_release, "%Y-%m-%d")
                    readable_date = dt.strftime("%-d %B %Y")
                except ValueError:
                    readable_date = us_release
                lines.append(f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ –°–®–ê: {readable_date}")

            return "\n".join(lines)
        except requests.exceptions.RequestException as e:
            logging.error("Star Trek info error: %s", e)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."

    def __process_movie_input(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
        try:
            movie_title = message.text.strip()
            info = self.get_movie_info(movie_title)
            self.bot.send_message(chat_id=message.chat.id, text=info)
        except Exception as e:
            logging.error("Processing error: %s", e)
            self.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
