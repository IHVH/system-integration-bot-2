import logging
from typing import List
import telebot
import requests
from telebot import types
from telebot.callback_data import CallbackData
from bot_func_abc import AtomicBotFunctionABC

class AtomicStarTrekBotFunction(AtomicBotFunctionABC):
    """–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ Star Trek —á–µ—Ä–µ–∑ API stapi.co"""

    commands: List[str] = ["startrek", "stmovies"]
    authors: List[str] = ["YourName"]
    about: str = "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ Star Trek"
    description: str = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/startrek –∏–ª–∏ /stmovies - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ Star Trek\n"
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º.\n"
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: stapi.co"
    )
    state: bool = True

    bot: telebot.TeleBot
    movie_keyboard_factory: CallbackData

    def set_handlers(self, bot: telebot.TeleBot):
        self.bot = bot
        self.movie_keyboard_factory = CallbackData('movie_action', prefix=self.commands[0])

        @bot.message_handler(commands=self.commands)
        def startrek_handler(message: types.Message):
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–ª—å–º–∞–º–∏ Star Trek:"
            bot.send_message(
                chat_id=message.chat.id,
                text=msg,
                reply_markup=self.__gen_markup()
            )

        @bot.callback_query_handler(func=None, config=self.movie_keyboard_factory.filter())
        def movie_callback(call: types.CallbackQuery):
            callback_data: dict = self.movie_keyboard_factory.parse(call.data)
            action = callback_data['movie_action']

            if action == 'list':
                movies = self.get_all_movies()
                bot.send_message(call.message.chat.id, movies)
            elif action == 'info':
                force_reply = types.ForceReply(selective=False)
                msg = bot.send_message(
                    call.message.chat.id,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ Star Trek:",
                    reply_markup=force_reply
                )
                bot.register_next_step_handler(msg, self.__process_movie_input)
            bot.answer_callback_query(call.id)

    def __gen_markup(self):
        markup = types.InlineKeyboardMarkup(row_width=2)
        list_data = self.movie_keyboard_factory.new(movie_action="list")
        info_data = self.movie_keyboard_factory.new(movie_action="info")

        markup.add(
            types.InlineKeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", callback_data=list_data),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ", callback_data=info_data)
        )
        return markup

    def get_all_movies(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ Star Trek"""
        try:
            url = "https://stapi.co/api/v1/rest/film/search"  # –ø—Ä–∏–º–µ—Ä API, –Ω–∞–¥–æ —É—Ç–æ—á–Ω–∏—Ç—å —Ç–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è Star Trek (–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ)
            params = {"title": "Star Trek"}
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            films = data.get('films', []) if 'films' in data else data.get('entities', [])
            if not films:
                return "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            film_list = "\n".join([f"‚Ä¢ {film['title']}" for film in films])
            return f"üé¨ –§–∏–ª—å–º—ã Star Trek:\n{film_list}\n\n(–í—Å–µ–≥–æ: {len(films)})"
        except requests.exceptions.RequestException as e:
            logging.error(f"Star Trek API error: {e}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤."

    def get_movie_info(self, title: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            url = "https://stapi.co/api/v1/rest/film/search"
            params = {"title": title}
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            films = data.get('films', []) if 'films' in data else data.get('entities', [])

            if not films:
                return f"‚ùå –§–∏–ª—å–º '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

            film = films[0]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            info = (
                f"üé¨ {film.get('title', 'N/A')}\n"
                f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {film.get('releaseDate', 'N/A')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {film.get('description', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                f"–†–µ–∂–∏—Å—Å–µ—Ä: {film.get('director', 'N/A')}\n"
            )
            return info
        except requests.exceptions.RequestException as e:
            logging.error(f"Star Trek info error: {e}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."

    def __process_movie_input(self, message: types.Message):
        try:
            movie_title = message.text.strip()
            info = self.get_movie_info(movie_title)
            self.bot.send_message(
                chat_id=message.chat.id,
                text=info
            )
        except Exception as e:
            logging.error(f"Processing error: {e}")
            self.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )