"""Module implementation of the atomic function for Pok√©mon data using Pok√©API."""

import logging
import random
from typing import List, Dict, Any
import requests
import telebot
from telebot import types as telebot_types
from telebot.callback_data import CallbackData
from bot_func_abc import AtomicBotFunctionABC


class AtomicPokeFunction(AtomicBotFunctionABC):
    """Implementation of atomic function for Pok√©mon data"""

    commands: List[str] = ["pokemon", "pokedex"]
    authors: List[str] = ["dantess998"]
    about: str = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–∞—Ö"
    description: str = """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫–µ–º–æ–Ω–∞—Ö –∏–∑ Pok√©API.
    –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–º –ø–æ–∫–µ–º–æ–Ω–µ, –≤–∫–ª—é—á–∞—è –µ–≥–æ —Ç–∏–ø, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    /pokemon pikachu - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–∏–∫–∞—á—É
    /pokedex - —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–∫–µ–º–æ–Ω –∏–∑ –ü–æ–∫–µ–¥–µ–∫—Å–∞
    """
    state: bool = True

    bot: telebot.TeleBot
    pokemon_keyboard_factory: CallbackData

    # API configuration
    API_URL_BASE = "https://pokeapi.co/api/v2/"

    def set_handlers(self, bot: telebot.TeleBot):
        """Set message handlers"""

        self.bot = bot
        self.pokemon_keyboard_factory = CallbackData(
            "action", 
            "pokemon_name", 
            prefix=self.commands[0]
        )

        @bot.message_handler(commands=self.commands)
        def pokemon_message_handler(message: telebot_types.Message):
            try:
                command = message.text.split()[0][1:]  # Remove the '/' and get the command
                self.__process_command(message, command)
            except (ValueError, IndexError) as ex:
                logging.exception("Error processing command: %s", ex)
                bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(ex)}")

        @bot.callback_query_handler(
            func=None, config=self.pokemon_keyboard_factory.filter()
        )
        def pokemon_keyboard_callback(call: telebot_types.CallbackQuery):
            try:
                callback_data: dict = self.pokemon_keyboard_factory.parse(
                    callback_data=call.data
                )
                self.__process_callback(call, callback_data)
            except (ValueError, KeyError, RuntimeError) as ex:
                logging.exception("Error processing callback: %s", ex)
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(ex)}")

    def __process_command(self, message: telebot_types.Message, command: str) -> None:
        """Process bot commands"""
        if command == "pokemon":
            # Check if a Pok√©mon name was provided
            if len(message.text.split()) > 1:
                pokemon_name = message.text.split(maxsplit=1)[1].lower()
                self.__handle_pokemon_info(message, pokemon_name)
            else:
                self.bot.reply_to(
                    message,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–∫–µ–º–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /pokemon pikachu. "
                    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pokedex –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞."
                )
        elif command == "pokedex":
            self.__handle_random_pokemon(message)
        else:
            self.__send_help(message)

    def __process_callback(self, call: telebot_types.CallbackQuery, callback_data: dict) -> None:
        """Process callback queries"""
        action = callback_data["action"]
        pokemon_name = callback_data["pokemon_name"]

        if action == "stats":
            self.__send_pokemon_stats(call.message.chat.id, pokemon_name)
        elif action == "abilities":
            self.__send_pokemon_abilities(call.message.chat.id, pokemon_name)
        elif action == "back":
            self.__handle_pokemon_info(call.message, pokemon_name)
        else:
            self.bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    def __make_api_request(
        self, endpoint: str, params: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """Make a request to the Pok√©API"""
        url = f"{self.API_URL_BASE}{endpoint}"
        return self.__execute_api_request(url, params)

    def __execute_api_request(self, url: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """Execute API request and handle common errors"""
        try:
            # Adding a user agent to differentiate from other implementations
            headers = {"User-Agent": "PokeBot/1.0"}
            with requests.get(url, params=params, headers=headers, timeout=10) as response:
                response.raise_for_status()
                return response.json()
        except requests.exceptions.RequestException as e:
            # Using a different error message format
            error_msg = f"Pok√©API request failed: {str(e)}"
            logging.error(error_msg)
            raise RuntimeError(error_msg) from e

    def __handle_pokemon_info(self, message: telebot_types.Message, pokemon_name: str) -> None:
        """Handle request for Pok√©mon information"""
        chat_id = message.chat.id
        self.bot.send_message(
            chat_id,
            f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫–µ–º–æ–Ω–µ {pokemon_name}..."
        )

        try:
            # Get Pok√©mon data
            data = self.__make_api_request(f"pokemon/{pokemon_name.lower()}")
            # Format response
            response = self.__format_pokemon_info(data)
            # Create markup with actions
            markup = self.__create_pokemon_detail_markup(pokemon_name)
            # Send Pok√©mon sprite if available
            if data.get("sprites") and data["sprites"].get("front_default"):
                self.bot.send_photo(
                    chat_id,
                    data["sprites"]["front_default"],
                    caption=response,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
            else:
                self.bot.send_message(
                    chat_id,
                    response,
                    parse_mode="Markdown",
                    reply_markup=markup
                )

        except (KeyError, ValueError, RuntimeError) as ex:
            logging.exception("Error fetching Pok√©mon info: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(ex)}")

    def __handle_random_pokemon(self, message: telebot_types.Message) -> None:
        """Handle request for a random Pok√©mon"""
        chat_id = message.chat.id
        self.bot.send_message(chat_id, "–í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ –∏–∑ –ü–æ–∫–µ–¥–µ–∫—Å–∞...")

        try:
            # Get total count of Pok√©mon
            data = self.__make_api_request("pokemon-species")
            count = data.get("count", 898)  # Default to 898 if count not available
            # Get a random Pok√©mon ID (limiting to original 898 to avoid forms)
            random_id = random.randint(1, min(count, 898))
            # Get Pok√©mon data
            pokemon_data = self.__make_api_request(f"pokemon/{random_id}")
            pokemon_name = pokemon_data["name"]
            # Show the Pok√©mon info
            self.__handle_pokemon_info(message, pokemon_name)
        except (KeyError, ValueError, RuntimeError) as ex:
            logging.exception("Error fetching random Pok√©mon: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(ex)}")

    def __format_pokemon_info(self, pokemon_data: Dict[str, Any]) -> str:
        """Format Pok√©mon information"""
        # Get basic info
        name = pokemon_data["name"].capitalize()
        pokemon_id = pokemon_data["id"]
        height = pokemon_data["height"] / 10  # Convert to meters
        weight = pokemon_data["weight"] / 10  # Convert to kg
        # Get types
        types = [t["type"]["name"].capitalize() for t in pokemon_data["types"]]
        types_str = ", ".join(types)
        # Format response
        response = (
            f"üîç *{name}* (#{pokemon_id})\n\n"
            f"üìä *–¢–∏–ø:* {types_str}\n"
            f"üìè *–†–æ—Å—Ç:* {height} –º\n"
            f"‚öñÔ∏è *–í–µ—Å:* {weight} –∫–≥\n\n"
        )
        # Add base experience
        if "base_experience" in pokemon_data:
            response += f"‚ú® *–ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç:* {pokemon_data['base_experience']}\n\n"
        return response

    def __create_pokemon_detail_markup(self, pokemon_name: str):
        """Create markup for Pok√©mon details"""
        markup = telebot_types.InlineKeyboardMarkup(row_width=2)
        stats_callback = self.pokemon_keyboard_factory.new(
            action="stats",
            pokemon_name=pokemon_name
        )
        abilities_callback = self.pokemon_keyboard_factory.new(
            action="abilities",
            pokemon_name=pokemon_name
        )

        markup.add(
            telebot_types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=stats_callback),
            telebot_types.InlineKeyboardButton("‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", callback_data=abilities_callback),
        )

        return markup

    def __send_pokemon_stats(self, chat_id: int, pokemon_name: str) -> None:
        """Send statistics for a specific Pok√©mon"""
        try:
            # Get Pok√©mon data
            data = self.__make_api_request(f"pokemon/{pokemon_name.lower()}")
            # Format stats
            stats = data["stats"]
            stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {pokemon_name.capitalize()}:*\n\n"
            for stat in stats:
                stat_name = stat["stat"]["name"]
                base_value = stat["base_stat"]
                # Translate stat names to Russian
                if stat_name == "hp":
                    stat_name = "HP (–∑–¥–æ—Ä–æ–≤—å–µ)"
                elif stat_name == "attack":
                    stat_name = "–ê—Ç–∞–∫–∞"
                elif stat_name == "defense":
                    stat_name = "–ó–∞—â–∏—Ç–∞"
                elif stat_name == "special-attack":
                    stat_name = "–°–ø–µ—Ü. –∞—Ç–∞–∫–∞"
                elif stat_name == "special-defense":
                    stat_name = "–°–ø–µ—Ü. –∑–∞—â–∏—Ç–∞"
                elif stat_name == "speed":
                    stat_name = "–°–∫–æ—Ä–æ—Å—Ç—å"
                stats_text += f"‚Ä¢ *{stat_name}:* {base_value}\n"
            # Create markup with back button
            markup = telebot_types.InlineKeyboardMarkup()
            back_callback = self.pokemon_keyboard_factory.new(
                action="back", pokemon_name=pokemon_name
            )
            markup.add(
                telebot_types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data=back_callback
                )
            )
            self.bot.send_message(
                chat_id,
                stats_text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except (KeyError, ValueError, RuntimeError) as ex:
            logging.exception("Error fetching Pok√©mon stats: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(ex)}")

    def __send_pokemon_abilities(self, chat_id: int, pokemon_name: str) -> None:
        """Send abilities for a specific Pok√©mon"""
        try:
            # Get Pok√©mon data
            data = self.__make_api_request(f"pokemon/{pokemon_name.lower()}")
            # Format abilities
            abilities = data["abilities"]
            abilities_text = f"‚ú® *–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ {pokemon_name.capitalize()}:*\n\n"
            for ability in abilities:
                ability_name = ability["ability"]["name"].replace("-", " ").capitalize()
                is_hidden = ability["is_hidden"]
                if is_hidden:
                    abilities_text += f"‚Ä¢ *{ability_name}* (—Å–∫—Ä—ã—Ç–∞—è)\n"
                else:
                    abilities_text += f"‚Ä¢ *{ability_name}*\n"
                # Get ability description
                try:
                    ability_data = self.__make_api_request(f"ability/{ability['ability']['name']}")
                    # Find Russian or English description
                    description = None
                    for entry in ability_data["effect_entries"]:
                        if entry["language"]["name"] == "en":
                            description = entry["effect"]
                            break
                    if description:
                        # Truncate if too long
                        if len(description) > 100:
                            description = description[:97] + "..."
                        abilities_text += f"  {description}\n\n"
                    else:
                        abilities_text += "\n"
                except (requests.RequestException, KeyError, ValueError) as ex:
                    logging.debug("Error fetching ability details: %s", ex)
                    abilities_text += "\n"
            # Create markup with back button
            markup = telebot_types.InlineKeyboardMarkup()
            back_callback = self.pokemon_keyboard_factory.new(
                action="back", pokemon_name=pokemon_name
            )
            markup.add(
                telebot_types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data=back_callback
                )
            )
            self.bot.send_message(
                chat_id,
                abilities_text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except (KeyError, ValueError, RuntimeError) as ex:
            logging.exception("Error fetching Pok√©mon abilities: %s", ex)
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π: {str(ex)}")

    def __send_help(self, message: telebot_types.Message) -> None:
        """Send help information about available commands"""
        help_text = (
            "*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ü–æ–∫–µ–º–æ–Ω–∞–º–∏:*\n\n"
            "/pokemon [–∏–º—è] - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–∫–µ–º–æ–Ω–µ\n"
            "/pokedex - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ –∏–∑ –ü–æ–∫–µ–¥–µ–∫—Å–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫–µ–º–æ–Ω–∞—Ö."
        )

        self.bot.send_message(message.chat.id, help_text, parse_mode="Markdown")
