"""Module implementation of the atomic function for Telegram Bot."""

import logging
from typing import List
import requests
import telebot
from telebot import types
from bot_func_abc import AtomicBotFunctionABC

logger = logging.getLogger(__name__)

class GameOfThronesQuotesBotFunction(AtomicBotFunctionABC):
    """Function to get Game of Thrones quotes from API by command"""

    commands: List[str] = ["got", "gots"]
    authors: List[str] = ["bolse119"]
    about: str = "–¶–∏—Ç–∞—Ç—ã –∏–∑ –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤!"
    description: str = (
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ò–≥—Ä—ã –ü—Ä–µ—Å—Ç–æ–ª–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/got - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –∏–º—è\n"
        "–ü—Ä–∏–º–µ—Ä: /got tyrion\n"
        "API: https://api.gameofthronesquotes.xyz"
    )
    state: bool = True

    bot: telebot.TeleBot

    characters: List[dict] = [
        {"name": "Tyrion Lannister", "slug": "tyrion"},
        {"name": "Jon Snow", "slug": "jon"},
        {"name": "Daenerys Targaryen", "slug": "daenerys"},
        {"name": "Jaime Lannister", "slug": "jaime"},
        {"name": "Sansa Stark", "slug": "sansa"},
        {"name": "Petyr Baelish", "slug": "petyr"},
        {"name": "Cersei Lannister", "slug": "cersei"},
        {"name": "Arya Stark", "slug": "arya"},
        {"name": "Eddard Stark", "slug": "eddard"},
        {"name": "Theon Greyjoy", "slug": "theon"},
        {"name": "Samwell Tarly", "slug": "samwell"},
        {"name": "Varys", "slug": "varys"}
    ]

    def set_handlers(self, bot: telebot.TeleBot):
        """Set message handlers"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: %s", self.commands)
        self.bot = bot

        @self.bot.message_handler(commands=self.commands)
        def got_message_handler(message: types.Message):
            logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ %s", message.text)

            command_args = message.text.split(maxsplit=1)
            if len(command_args) < 2:
                self.__show_character_list(message.chat.id)
                return  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫

            character_input = command_args[1].lower().strip()
            character = next(
                (char for char in self.characters
                 if char["slug"].lower() == character_input),
                None
            )

            if not character:
                self.bot.send_message(
                    message.chat.id,
                    f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ `{character_input}` –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –≤—ã–±—Ä–∞–≤ **slug** –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
                )
                self.__show_character_list(message.chat.id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                return

            quote = self.__get_got_quote(character["slug"])

            if quote:
                self.bot.send_message(
                    message.chat.id,
                    f"üìú \"{quote['sentence']}\"\n‚Äî {quote['character']['name']}"
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –¥–ª—è {character['name']}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

            self.__show_character_list(message.chat.id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Ü–∏—Ç–∞—Ç—ã

    def __show_character_list(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫–æ–ª–æ–Ω–∫—É"""
        characters_list = "\n".join(
            f"- {char['name']} (`{char['slug']}`)" for char in self.characters
        )
        self.bot.send_message(
            chat_id,
            f"üìú **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:**\n{characters_list}\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/got`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/got tyrion`\n", 
            parse_mode="Markdown"
        )

    @staticmethod
    def __get_got_quote(slug: str) -> dict:
        """Get random quote for specific character"""
        try:
            response = requests.get(
                f"https://api.gameofthronesquotes.xyz/v1/author/{slug}/2",
                timeout=5
            )
            response.raise_for_status()
            data = response.json()
            return data[0] if isinstance(data, list) and len(data) > 0 else None
        except requests.RequestException:
            return None
