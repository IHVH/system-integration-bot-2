import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from core_api import CoreAcUkAPI

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

core_api = CoreAcUkAPI(os.getenv("CORE_API_KEY"))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search <–∑–∞–ø—Ä–æ—Å> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /search machine learning"
    )

async def search_papers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("üö´ –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: /search quantum computing")
        return

    try:
        await update.message.reply_text("üîé –ò—â—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        results = core_api.search_publications(query)
        publications = results.get("results", [])

        if not publications:
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        for pub in publications:
            message = (
                f"üìÑ <b>{pub.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"üë• –ê–≤—Ç–æ—Ä—ã: {', '.join([a.get('name', '?') for a in pub.get('authors', [])])}\n"
                f"üìÖ –ì–æ–¥: {pub.get('yearPublished', 'N/A')}\n"
                f"üîó DOI: {pub.get('doi', 'N/A')}"
            )

            buttons = []
            if pub.get("downloadUrl"):
                buttons.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", url=pub["downloadUrl"])])

            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(buttons) if buttons else None,
                parse_mode="HTML",
            )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def main():
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("search", search_papers))
    application.add_handler(CommandHandler("help", start))

    application.run_polling()

if __name__ == "__main__":
    main()
